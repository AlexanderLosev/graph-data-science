apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

description = 'Neo4j Graph Data Science :: Packaging'
group = 'com.neo4j.gds'

dependencies {
    compile project(path: ':proc')
    compile project(path: ':alpha-proc')
}

task licenseFile {
    outputs.file(distributionLicenseFile)
}

shadowJar {
    baseName = "neo4j-graph-data-science"
    classifier = "standalone"
    exclude 'META-INF/versions/**/*'
    from licenseFile
    from generateLicensesFiles
}

task shadowCopy(type: Copy) {
    from(shadowJar)
    into distributionDir
}

task versionsJson {
    ext.outFile = file("$distributionDir/versions.json")
    def bucketUrl = "https://s3-eu-west-1.amazonaws.com/com.neo4j.graphalgorithms.dist/graph-data-science"
    def versionsJsonUrl = new URL("https://s3-eu-west-1.amazonaws.com/com.neo4j.graphalgorithms.dist/graph-data-science/versions.json")
    outputs.file(outFile)
    doLast {
        def versionsJson = new groovy.json.JsonSlurper().parse(versionsJsonUrl)
        def indexedVersionsJson = versionsJson.collectEntries {
            [(it.neo4j): it]
        }
        indexedVersionsJson[ver.neo4j] = [
                'neo4j': ver.neo4j,
                'version': project.version,
                'jar': "$bucketUrl/${shadowJar.archiveName}",
        ]
        outFile.text = groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(indexedVersionsJson.values()))
    }
}

task distZip(type: Zip) {
    description 'Create a ZIP archive of the main distribution JAR.'
    baseName = shadowJar.baseName
    classifier = shadowJar.classifier
    from shadowJar
    destinationDir file(distributionDir)
}

ci.finalizedBy shadowCopy, versionsJson, distZip
cipr.finalizedBy shadowCopy, versionsJson, distZip
