apply plugin: 'com.github.johnrengelman.shadow'

dependencies {
    compile project(':labs')

    compileOnly group: 'org.neo4j',             name: 'neo4j',              version: versions.neo4j

    testCompile group: 'org.neo4j.community',   name: 'it-test-support',    version: versions.neo4j
    testCompile group: 'junit',                 name: 'junit',              version: versions.junit
    testCompile group: 'org.hamcrest',          name: 'hamcrest-library',   version: versions.hamcrest
    testCompile group: 'org.mockito',           name: 'mockito-core',       version: versions.mockito
    testCompile group: 'org.mockito',           name: 'mockito-inline',     version: versions.mockito
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from(javadoc.destinationDir)
}

description = 'Neo4j Graph Algorithms :: Procedures'

tasks.withType(JavaCompile) {
    options.compilerArgs <<
            '-AIgnoreContextWarnings' <<
            '-AGeneratedDocumentationPath=target/generated-documentation' <<
            '-ADocumentation.FieldDelimiter=¦' <<
            '-ADocumentation.ExportedHeaders=qualified name¦description¦type' <<
            '-ADocumentation.QuotedFields=false' <<
            '-ADocumentation.DelimitedFirstField=true' <<
            '-ADocumentation.ExportGrouping=SINGLE'
}

publishing {
    publications {
        algo(MavenPublication) {
            project.shadow.component(it)
        }
    }
}

shadowJar {
    baseName = "neo4j-graph-algorithms"
    classifier = "standalone"
    minimize()
    exclude 'META-INF/versions/**/*'
}

task shadowCopy(type: Copy) {
    from(shadowJar)
    into distributionDir
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput
def updateVersionsJson(algoVersion, neo4jVersion) {
    def bucketUrl = "http://s3-eu-west-1.amazonaws.com/com.neo4j.graphalgorithms.dist"
    def url = new URL("https://raw.githubusercontent.com/neo4j-contrib/neo4j-graph-algorithms/master/versions.json")
    def versionsJson = new JsonSlurper().parse(url)
    def indexedVersionsJson = versionsJson.collectEntries {
        [(it.neo4j): it]
    }
    indexedVersionsJson[neo4jVersion] = [
            'neo4j': neo4jVersion,
            'version': algoVersion,
            'url': "",
            'jar': "$bucketUrl/neo4j-graph-algorithms-$algoVersion-standalone.jar"
    ]
    JsonOutput.prettyPrint(JsonOutput.toJson(indexedVersionsJson.values()))
}

task versionsJson {
    ext.outFile = file("$distributionDir/versions.json")
    outputs.file outFile
    doLast {
        outFile.text = updateVersionsJson(project.version, versions.neo4j)
    }
}

ci.finalizedBy shadowCopy, versionsJson
cipr.finalizedBy shadowCopy, versionsJson
