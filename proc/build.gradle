description = 'Neo4j Graph Algorithms :: Procedures'

apply plugin: 'com.github.johnrengelman.shadow'

dependencies {
    compile project(':labs')

    compileOnly group: 'org.neo4j',                   name: 'neo4j',                version: ver.'neo4j'

    testCompile project(':test-utils')

    testCompile group: 'org.neo4j.community',         name: 'it-test-support',      version: ver.'neo4j'
    testCompile group: 'org.hamcrest',                name: 'hamcrest-library',     version: ver.'hamcrest'
    testCompile group: 'org.mockito',                 name: 'mockito-core',         version: ver.'mockito'
    testCompile group: 'org.mockito',                 name: 'mockito-inline',       version: ver.'mockito'

    testCompile     dep.junit4

    testCompile     platform(dep.junit5bom)
    testCompile     dep.junit5jupiter
    testRuntimeOnly dep.junit5vintage
    testRuntimeOnly dep.junit5platform
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from(javadoc.destinationDir)
}

test {
    maxHeapSize = "1G"
    useJUnitPlatform {
        includeEngines 'junit-jupiter', 'junit-vintage'
    }
}

publishing {
    publications {
        algo(MavenPublication) {
            project.shadow.component(it)
        }
    }
}

shadowJar {
    baseName = "neo4j-graph-algorithms"
    classifier = "standalone"
    minimize()
    exclude 'META-INF/versions/**/*'
    from licenseFile
    from generateLicensesFiles
}

task shadowCopy(type: Copy) {
    from(shadowJar)
    into distributionDir
}

task versionsJson {
    ext.outFile = file("$distributionDir/versions.json")
    def bucketUrl = "http://s3-eu-west-1.amazonaws.com/com.neo4j.graphalgorithms.dist"
    def versionsJsonUrl = new URL("https://raw.githubusercontent.com/neo4j-contrib/neo4j-graph-algorithms/master/versions.json")
    outputs.file(outFile)
    doLast {
        def versionsJson = new groovy.json.JsonSlurper().parse(versionsJsonUrl)
        def indexedVersionsJson = versionsJson.collectEntries {
            [(it.neo4j): it]
        }
        indexedVersionsJson[versions.neo4j] = [
                'neo4j': versions.neo4j,
                'version': project.version,
                'url': "",
                'jar': "$bucketUrl/${shadowJar.archiveName}",
        ]
        outFile.text = groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(indexedVersionsJson.values()))
    }
}

task distZip(type: Zip) {
    description 'Create a ZIP archive of the main distribution JAR.'
    baseName = shadowJar.baseName
    classifier = shadowJar.classifier
    from shadowJar
    destinationDir file(distributionDir)
}

ci.finalizedBy shadowCopy, versionsJson, distZip
cipr.finalizedBy shadowCopy, versionsJson, distZip
